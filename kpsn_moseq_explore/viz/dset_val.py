import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

from ..lib import kpms_custom_io as cio
from ..lib import linear_skeletal as ls
from ..lib import skeleton 

def blscale(coords, src_age, tgt_age, data_dir, config):
    """
    coords: dict[str, array]
        Coordinates array generated by lib.datasets.blscale
    src_age: str
    tgt_age: str
    data_dir: str
        Path to load target subjects from for comparison bone lengths
    config: dict
    """

    tgt_sessions, (tgt_coords, _) = cio.with_age(data_dir, tgt_age, config)
    _, tgt_bones, (arm, ls_mat) = ls.roots_and_bones(tgt_coords, config)
    _, gen_bones, _ = ls.roots_and_bones(coords, config)
    src_ids = set(s.split(':')[0] for s in coords)
    
    tgt_lengths = {
        s: np.linalg.norm(tgt_bones[s], axis = -1)
        for s in tgt_sessions}
    gen_lengths = {
        s: np.linalg.norm(gen_bones[s], axis = -1)
        for s in coords}
    

    plot_bones = [
        bone_ix for bone_ix in range(len(arm.bones))
        if all(arm.keypt_names[arm.bones[bone_ix, i]] in config['use_bodyparts']
                   for i in range(2))]
    
    fig, ax = plt.subplots(figsize = (8, 1.5 * len(plot_bones)),
        nrows = len(plot_bones),
        ncols = 1,
        sharex = True, sharey = 'row')

    subsample = 500
    
    for i_bone, bone_ix in enumerate(plot_bones):
    

        for sess in tgt_sessions:
            # real dataset: target age
            sns.kdeplot(
                tgt_lengths[sess][::subsample, bone_ix],
                ax = ax[i_bone],
                color = '.6',
                lw = 0.5,
                label = f'{tgt_age}wk real' if i_bone == 0 else None)
            
        for src_id in src_ids:
            # generated dataset: source age
            sns.kdeplot(
                gen_lengths[f'{src_id}:{src_age}wk'][::subsample, bone_ix],
                ax = ax[i_bone],
                color = 'k',
                lw = 0.5,
                label = f'{src_age}wk true/gen.' if i_bone == 0 else None)
            
            # generated dataset: target age
            sns.kdeplot(
                gen_lengths[f'{src_id}:{tgt_age}wk'][::subsample, bone_ix],
                ax = ax[i_bone],
                color = 'C0',
                lw = 0.5,
                label = f'{tgt_age}wk gen.' if i_bone == 0 else None)

        ax[i_bone].set_ylabel(arm.bone_name(i_bone))

    ax[i_bone].legend(frameon = False, loc = 'center left', bbox_to_anchor = (1, 1))

    sns.despine()
    fig.tight_layout()
    return fig